// Generated by Dagger (https://dagger.dev).
package ymsli.com.cpo.utils;

import android.app.Activity;
import android.app.Service;
import android.content.SharedPreferences;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import ymsli.com.cpo.data.api.API;
import ymsli.com.cpo.data.repository.AppRepository;
import ymsli.com.cpo.di.ApiModule;
import ymsli.com.cpo.di.ApiModule_ProvideHttpClientFactory;
import ymsli.com.cpo.di.ApiModule_ProvideLaunchListApiFactory;
import ymsli.com.cpo.di.ApiModule_ProvideRetrofitFactory;
import ymsli.com.cpo.di.ApiModule_ProvideSharedPreferenceFactory;
import ymsli.com.cpo.ui.view.activity.AppraisalDetailActivity;
import ymsli.com.cpo.ui.view.activity.AppraisalHistoryActivity;
import ymsli.com.cpo.ui.view.activity.BookAppointmentActivity;
import ymsli.com.cpo.ui.view.activity.CustomerNftDetailActivity;
import ymsli.com.cpo.ui.view.activity.DealerNearActivity;
import ymsli.com.cpo.ui.view.activity.LoginActivity;
import ymsli.com.cpo.ui.view.activity.MintNftSuccessActivity;
import ymsli.com.cpo.ui.view.activity.ModifyItemsActivity;
import ymsli.com.cpo.ui.view.activity.OfferListActivity;
import ymsli.com.cpo.ui.view.activity.ProfileActivity;
import ymsli.com.cpo.ui.view.activity.QrScanActivity;
import ymsli.com.cpo.ui.view.activity.ServiceHistoryActivity;
import ymsli.com.cpo.ui.view.activity.ServiceHistoryDetailActivity;
import ymsli.com.cpo.ui.view.activity.ServiceItemsActivity;
import ymsli.com.cpo.ui.view.activity.ServiceSubmitActivity;
import ymsli.com.cpo.ui.view.activity.VehicleInformationCustomer;
import ymsli.com.cpo.ui.view.activity.VehiclesInformationDealer;
import ymsli.com.cpo.ui.view.activity.WarrantiesActivity;
import ymsli.com.cpo.ui.view.activity.WebViewActivity;
import ymsli.com.cpo.ui.viewModel.ActiveWarrantiesViewModel;
import ymsli.com.cpo.ui.viewModel.ActiveWarrantiesViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.AppraisalHistoryViewModel;
import ymsli.com.cpo.ui.viewModel.AppraisalHistoryViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.BookAppointmentViewModel;
import ymsli.com.cpo.ui.viewModel.BookAppointmentViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.DealerNearViewModel;
import ymsli.com.cpo.ui.viewModel.DealerNearViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.GetNewUidViewModel;
import ymsli.com.cpo.ui.viewModel.GetNewUidViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.LoginViewModel;
import ymsli.com.cpo.ui.viewModel.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.MintNftSuccessViewModel;
import ymsli.com.cpo.ui.viewModel.MintNftSuccessViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.ModifyItemsViewModel;
import ymsli.com.cpo.ui.viewModel.ModifyItemsViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.NftDetailViewModel;
import ymsli.com.cpo.ui.viewModel.NftDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.OfferListViewModel;
import ymsli.com.cpo.ui.viewModel.OfferListViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.PostImageViewModel;
import ymsli.com.cpo.ui.viewModel.PostImageViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.ProfileViewModel;
import ymsli.com.cpo.ui.viewModel.ProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.QrScanViewModel;
import ymsli.com.cpo.ui.viewModel.QrScanViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.ServiceHistoryViewModel;
import ymsli.com.cpo.ui.viewModel.ServiceHistoryViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.ServiceItemsViewModel;
import ymsli.com.cpo.ui.viewModel.ServiceItemsViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.ServiceSubmitViewModel;
import ymsli.com.cpo.ui.viewModel.ServiceSubmitViewModel_HiltModules_KeyModule_ProvideFactory;
import ymsli.com.cpo.ui.viewModel.VehicleInformationViewModel;
import ymsli.com.cpo.ui.viewModel.VehicleInformationViewModel_HiltModules_KeyModule_ProvideFactory;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerMyApplication_HiltComponents_SingletonC {
  private DaggerMyApplication_HiltComponents_SingletonC() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder apiModule(ApiModule apiModule) {
      Preconditions.checkNotNull(apiModule);
      return this;
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public MyApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new SingletonCImpl(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements MyApplication_HiltComponents.ActivityRetainedC.Builder {
    private final SingletonCImpl singletonCImpl;

    private ActivityRetainedCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public MyApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonCImpl);
    }
  }

  private static final class ActivityCBuilder implements MyApplication_HiltComponents.ActivityC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonCImpl, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements MyApplication_HiltComponents.FragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements MyApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements MyApplication_HiltComponents.ViewC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonCImpl, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements MyApplication_HiltComponents.ViewModelC.Builder {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonCImpl, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements MyApplication_HiltComponents.ServiceC.Builder {
    private final SingletonCImpl singletonCImpl;

    private Service service;

    private ServiceCBuilder(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public MyApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonCImpl, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends MyApplication_HiltComponents.ViewWithFragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends MyApplication_HiltComponents.FragmentC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends MyApplication_HiltComponents.ViewC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
        ActivityCImpl activityCImpl, View viewParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends MyApplication_HiltComponents.ActivityC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(17).add(ActiveWarrantiesViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(AppraisalHistoryViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(BookAppointmentViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(DealerNearViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(GetNewUidViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MintNftSuccessViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ModifyItemsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(NftDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(OfferListViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(PostImageViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(QrScanViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ServiceHistoryViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ServiceItemsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ServiceSubmitViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(VehicleInformationViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonCImpl, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public void injectAppraisalDetailActivity(AppraisalDetailActivity arg0) {
    }

    @Override
    public void injectAppraisalHistoryActivity(AppraisalHistoryActivity arg0) {
    }

    @Override
    public void injectBookAppointmentActivity(BookAppointmentActivity arg0) {
    }

    @Override
    public void injectCustomerNftDetailActivity(CustomerNftDetailActivity arg0) {
    }

    @Override
    public void injectDealerNearActivity(DealerNearActivity arg0) {
    }

    @Override
    public void injectLoginActivity(LoginActivity arg0) {
    }

    @Override
    public void injectMintNftSuccessActivity(MintNftSuccessActivity arg0) {
    }

    @Override
    public void injectModifyItemsActivity(ModifyItemsActivity arg0) {
    }

    @Override
    public void injectOfferListActivity(OfferListActivity arg0) {
    }

    @Override
    public void injectProfileActivity(ProfileActivity arg0) {
    }

    @Override
    public void injectQrScanActivity(QrScanActivity arg0) {
    }

    @Override
    public void injectServiceHistoryActivity(ServiceHistoryActivity arg0) {
    }

    @Override
    public void injectServiceHistoryDetailActivity(ServiceHistoryDetailActivity arg0) {
    }

    @Override
    public void injectServiceItemsActivity(ServiceItemsActivity arg0) {
    }

    @Override
    public void injectServiceSubmitActivity(ServiceSubmitActivity arg0) {
    }

    @Override
    public void injectVehicleInformationCustomer(VehicleInformationCustomer arg0) {
    }

    @Override
    public void injectVehiclesInformationDealer(VehiclesInformationDealer arg0) {
    }

    @Override
    public void injectWarrantiesActivity(WarrantiesActivity arg0) {
    }

    @Override
    public void injectWebViewActivity(WebViewActivity arg0) {
    }
  }

  private static final class ViewModelCImpl extends MyApplication_HiltComponents.ViewModelC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<ActiveWarrantiesViewModel> activeWarrantiesViewModelProvider;

    private Provider<AppraisalHistoryViewModel> appraisalHistoryViewModelProvider;

    private Provider<BookAppointmentViewModel> bookAppointmentViewModelProvider;

    private Provider<DealerNearViewModel> dealerNearViewModelProvider;

    private Provider<GetNewUidViewModel> getNewUidViewModelProvider;

    private Provider<LoginViewModel> loginViewModelProvider;

    private Provider<MintNftSuccessViewModel> mintNftSuccessViewModelProvider;

    private Provider<ModifyItemsViewModel> modifyItemsViewModelProvider;

    private Provider<NftDetailViewModel> nftDetailViewModelProvider;

    private Provider<OfferListViewModel> offerListViewModelProvider;

    private Provider<PostImageViewModel> postImageViewModelProvider;

    private Provider<ProfileViewModel> profileViewModelProvider;

    private Provider<QrScanViewModel> qrScanViewModelProvider;

    private Provider<ServiceHistoryViewModel> serviceHistoryViewModelProvider;

    private Provider<ServiceItemsViewModel> serviceItemsViewModelProvider;

    private Provider<ServiceSubmitViewModel> serviceSubmitViewModelProvider;

    private Provider<VehicleInformationViewModel> vehicleInformationViewModelProvider;

    private ViewModelCImpl(SingletonCImpl singletonCImpl,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonCImpl = singletonCImpl;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private AppRepository appRepository() {
      return new AppRepository(singletonCImpl.aPI());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.activeWarrantiesViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 0);
      this.appraisalHistoryViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 1);
      this.bookAppointmentViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 2);
      this.dealerNearViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 3);
      this.getNewUidViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 4);
      this.loginViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 5);
      this.mintNftSuccessViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 6);
      this.modifyItemsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 7);
      this.nftDetailViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 8);
      this.offerListViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 9);
      this.postImageViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 10);
      this.profileViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 11);
      this.qrScanViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 12);
      this.serviceHistoryViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 13);
      this.serviceItemsViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 14);
      this.serviceSubmitViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 15);
      this.vehicleInformationViewModelProvider = new SwitchingProvider<>(singletonCImpl, activityRetainedCImpl, viewModelCImpl, 16);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(17).put("ymsli.com.cpo.ui.viewModel.ActiveWarrantiesViewModel", ((Provider) activeWarrantiesViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.AppraisalHistoryViewModel", ((Provider) appraisalHistoryViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.BookAppointmentViewModel", ((Provider) bookAppointmentViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.DealerNearViewModel", ((Provider) dealerNearViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.GetNewUidViewModel", ((Provider) getNewUidViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.LoginViewModel", ((Provider) loginViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.MintNftSuccessViewModel", ((Provider) mintNftSuccessViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.ModifyItemsViewModel", ((Provider) modifyItemsViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.NftDetailViewModel", ((Provider) nftDetailViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.OfferListViewModel", ((Provider) offerListViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.PostImageViewModel", ((Provider) postImageViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.ProfileViewModel", ((Provider) profileViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.QrScanViewModel", ((Provider) qrScanViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.ServiceHistoryViewModel", ((Provider) serviceHistoryViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.ServiceItemsViewModel", ((Provider) serviceItemsViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.ServiceSubmitViewModel", ((Provider) serviceSubmitViewModelProvider)).put("ymsli.com.cpo.ui.viewModel.VehicleInformationViewModel", ((Provider) vehicleInformationViewModelProvider)).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          ViewModelCImpl viewModelCImpl, int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // ymsli.com.cpo.ui.viewModel.ActiveWarrantiesViewModel 
          return (T) new ActiveWarrantiesViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 1: // ymsli.com.cpo.ui.viewModel.AppraisalHistoryViewModel 
          return (T) new AppraisalHistoryViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 2: // ymsli.com.cpo.ui.viewModel.BookAppointmentViewModel 
          return (T) new BookAppointmentViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 3: // ymsli.com.cpo.ui.viewModel.DealerNearViewModel 
          return (T) new DealerNearViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 4: // ymsli.com.cpo.ui.viewModel.GetNewUidViewModel 
          return (T) new GetNewUidViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 5: // ymsli.com.cpo.ui.viewModel.LoginViewModel 
          return (T) new LoginViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 6: // ymsli.com.cpo.ui.viewModel.MintNftSuccessViewModel 
          return (T) new MintNftSuccessViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 7: // ymsli.com.cpo.ui.viewModel.ModifyItemsViewModel 
          return (T) new ModifyItemsViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 8: // ymsli.com.cpo.ui.viewModel.NftDetailViewModel 
          return (T) new NftDetailViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 9: // ymsli.com.cpo.ui.viewModel.OfferListViewModel 
          return (T) new OfferListViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 10: // ymsli.com.cpo.ui.viewModel.PostImageViewModel 
          return (T) new PostImageViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 11: // ymsli.com.cpo.ui.viewModel.ProfileViewModel 
          return (T) new ProfileViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 12: // ymsli.com.cpo.ui.viewModel.QrScanViewModel 
          return (T) new QrScanViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 13: // ymsli.com.cpo.ui.viewModel.ServiceHistoryViewModel 
          return (T) new ServiceHistoryViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 14: // ymsli.com.cpo.ui.viewModel.ServiceItemsViewModel 
          return (T) new ServiceItemsViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 15: // ymsli.com.cpo.ui.viewModel.ServiceSubmitViewModel 
          return (T) new ServiceSubmitViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          case 16: // ymsli.com.cpo.ui.viewModel.VehicleInformationViewModel 
          return (T) new VehicleInformationViewModel(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonCImpl.applicationContextModule), viewModelCImpl.appRepository());

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends MyApplication_HiltComponents.ActivityRetainedC {
    private final SingletonCImpl singletonCImpl;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(SingletonCImpl singletonCImpl) {
      this.singletonCImpl = singletonCImpl;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonCImpl, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonCImpl, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final SingletonCImpl singletonCImpl;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(SingletonCImpl singletonCImpl, ActivityRetainedCImpl activityRetainedCImpl,
          int id) {
        this.singletonCImpl = singletonCImpl;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends MyApplication_HiltComponents.ServiceC {
    private final SingletonCImpl singletonCImpl;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(SingletonCImpl singletonCImpl, Service serviceParam) {
      this.singletonCImpl = singletonCImpl;


    }
  }

  private static final class SingletonCImpl extends MyApplication_HiltComponents.SingletonC {
    private final ApplicationContextModule applicationContextModule;

    private final SingletonCImpl singletonCImpl = this;

    private SingletonCImpl(ApplicationContextModule applicationContextModuleParam) {
      this.applicationContextModule = applicationContextModuleParam;

    }

    private SharedPreferences sharedPreferences() {
      return ApiModule_ProvideSharedPreferenceFactory.provideSharedPreference(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
    }

    private OkHttpClient okHttpClient() {
      return ApiModule_ProvideHttpClientFactory.provideHttpClient(sharedPreferences());
    }

    private Retrofit retrofit() {
      return ApiModule_ProvideRetrofitFactory.provideRetrofit(okHttpClient());
    }

    private API aPI() {
      return ApiModule_ProvideLaunchListApiFactory.provideLaunchListApi(retrofit());
    }

    @Override
    public ActivityRetainedComponentBuilder retainedComponentBuilder() {
      return new ActivityRetainedCBuilder(singletonCImpl);
    }

    @Override
    public ServiceComponentBuilder serviceComponentBuilder() {
      return new ServiceCBuilder(singletonCImpl);
    }

    @Override
    public void injectMyApplication(MyApplication arg0) {
    }
  }
}
